name: Deploy Supabase Resources

on:
  push:
    branches:
      - main
    paths:
      - 'supabase/functions/**'
      - 'supabase/migrations/**'
      - '.github/workflows/deploy-supabase.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Check for migrations
        id: check_migrations
        run: |
          if [ -d "supabase/migrations" ] && [ "$(ls -A supabase/migrations)" ]; then
            echo "migrations_exist=true" >> $GITHUB_OUTPUT
            echo "Found migrations to deploy:"
            ls -la supabase/migrations/
          else
            echo "migrations_exist=false" >> $GITHUB_OUTPUT
            echo "No migrations found"
          fi

      - name: Check for edge functions
        id: check_functions
        run: |
          if [ -d "supabase/functions" ] && [ "$(ls -A supabase/functions)" ]; then
            echo "functions_exist=true" >> $GITHUB_OUTPUT
            echo "Found edge functions to deploy:"
            ls -la supabase/functions/
          else
            echo "functions_exist=false" >> $GITHUB_OUTPUT
            echo "No edge functions found"
          fi

      - name: Link Supabase Project
        if: steps.check_migrations.outputs.migrations_exist == 'true' || steps.check_functions.outputs.functions_exist == 'true'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          echo "Linking Supabase project..."
          # Use password non-interactively for CI/CD
          supabase link --project-ref $SUPABASE_PROJECT_ID --password "$SUPABASE_DB_PASSWORD"
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Project linked successfully"
          else
            echo "‚ùå Failed to link project"
            exit 1
          fi

      - name: Check Migration Sync
        if: steps.check_migrations.outputs.migrations_exist == 'true'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          echo "Checking if local migrations match remote database..."
          
          # Check migration status to detect sync issues
          migration_status=$(supabase db diff --schema public 2>&1)
          diff_exit_code=$?
          
          # If there are differences, it means remote has migrations not in local repo
          if [ $diff_exit_code -ne 0 ] && echo "$migration_status" | grep -q "relation.*does not exist\|column.*does not exist\|function.*does not exist"; then
            echo "üö® MIGRATION SYNC ERROR DETECTED"
            echo "==============================================="
            echo "‚ùå Your local migrations are out of sync with the remote database."
            echo ""
            echo "üîç ISSUE:"
            echo "   The remote database contains migrations that are not present in your local repository."
            echo "   This typically happens when:"
            echo "   - Migrations were applied directly to the database"
            echo "   - Another developer's migrations were deployed but not pulled locally"
            echo "   - Database changes were made through the Supabase Dashboard"
            echo ""
            echo "üõ†Ô∏è  HOW TO FIX:"
            echo "   1. Pull the latest remote migrations to your local repository:"
            echo "      supabase db pull"
            echo ""
            echo "   2. Review the pulled migration files in supabase/migrations/"
            echo ""
            echo "   3. Commit and push the pulled migrations:"
            echo "      git add supabase/migrations/"
            echo "      git commit -m 'sync: Pull remote database migrations'"
            echo "      git push"
            echo ""
            echo "   4. Re-run this deployment workflow"
            echo ""
            echo "üìã MIGRATION STATUS:"
            echo "$migration_status"
            echo "==============================================="
            exit 1
          else
            echo "‚úÖ Local migrations appear to be in sync with remote database"
          fi

      - name: Deploy Database Migrations
        if: steps.check_migrations.outputs.migrations_exist == 'true'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          echo "Deploying database migrations..."
          
          # Deploy migrations after linking project and sync check
          supabase db push --include-all
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Database migrations deployed successfully"
          else
            echo "‚ùå Failed to deploy database migrations"
            echo ""
            echo "üí° TROUBLESHOOTING TIPS:"
            echo "   - Check if migrations are properly formatted"
            echo "   - Verify database credentials and permissions"
            echo "   - Review migration files for syntax errors"
            echo "   - Check Supabase project status and quotas"
            exit 1
          fi

      - name: Deploy Edge Functions
        if: steps.check_functions.outputs.functions_exist == 'true'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          echo "Deploying edge functions..."
          
          # Deploy all edge functions after linking project
          supabase functions deploy
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Edge functions deployed successfully"
          else
            echo "‚ùå Failed to deploy edge functions"
            exit 1
          fi

      - name: Configure Function Secrets
        if: steps.check_functions.outputs.functions_exist == 'true'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          echo "Setting up function secrets..."
          
          # Set OpenAI API key if provided
          if [ ! -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "Setting OpenAI API key..."
            supabase secrets set OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ OpenAI API key configured successfully"
            else
              echo "‚ö†Ô∏è Warning: Failed to set OpenAI API key"
            fi
          else
            echo "No OpenAI API key provided, skipping..."
          fi

      - name: Deployment Summary
        if: always()
        run: |
          echo "üöÄ Deployment Summary:"
          echo "- Migrations checked: ${{ steps.check_migrations.outputs.migrations_exist }}"
          echo "- Migrations deployed: ${{ steps.check_migrations.outputs.migrations_exist }}"
          echo "- Edge functions deployed: ${{ steps.check_functions.outputs.functions_exist }}"
          echo "- Project ID: ${{ secrets.SUPABASE_PROJECT_ID }}"
          echo "- Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "üìÑ Workflow completed. Check individual step results above for details."